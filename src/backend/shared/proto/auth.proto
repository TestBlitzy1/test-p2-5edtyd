syntax = "proto3";

package auth;

import "google/protobuf/timestamp.proto";

// Authentication service providing comprehensive user authentication and authorization
service AuthService {
    // Authenticates users with multi-provider support
    rpc Login(LoginRequest) returns (LoginResponse) {}
    
    // Registers new users with email verification
    rpc Register(RegisterRequest) returns (RegisterResponse) {}
    
    // Refreshes expired access tokens
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {}
    
    // Validates tokens and checks permissions
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {}
}

// Supported authentication providers
enum AuthProvider {
    LOCAL = 0;
    GOOGLE = 1;
    LINKEDIN = 2;
}

// User roles for access control
enum UserRole {
    UNSPECIFIED = 0;
    ADMIN = 1;
    MANAGER = 2;
    ANALYST = 3;
    API_USER = 4;
}

// Core user data structure
message User {
    string id = 1;
    string email = 2;
    UserRole role = 3;
    AuthProvider provider = 4;
    string first_name = 5;
    string last_name = 6;
    bool is_email_verified = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp updated_at = 9;
    google.protobuf.Timestamp last_login = 10;
}

// Login request with multi-provider support
message LoginRequest {
    string email = 1;
    oneof auth_credential {
        string password = 2;
        string provider_token = 3;
    }
    AuthProvider provider = 4;
}

// Login response with tokens
message LoginResponse {
    string access_token = 1;
    string refresh_token = 2;
    int32 expires_in = 3;
    string token_type = 4;
    repeated string scope = 5;
    User user = 6;
}

// User registration request
message RegisterRequest {
    string email = 1;
    string first_name = 2;
    string last_name = 3;
    oneof auth_credential {
        string password = 4;
        string provider_token = 5;
    }
    AuthProvider provider = 6;
}

// Registration response
message RegisterResponse {
    User user = 1;
    string access_token = 2;
    string refresh_token = 3;
    int32 expires_in = 4;
    string token_type = 5;
    repeated string scope = 6;
    bool requires_verification = 7;
}

// Token refresh request
message RefreshTokenRequest {
    string refresh_token = 1;
}

// Token refresh response
message RefreshTokenResponse {
    string access_token = 1;
    int32 expires_in = 2;
    string token_type = 3;
    repeated string scope = 4;
}

// Token validation request
message ValidateTokenRequest {
    string access_token = 1;
    repeated string required_scopes = 2;
}

// Token validation response
message ValidateTokenResponse {
    bool is_valid = 1;
    User user = 2;
    repeated string granted_scopes = 3;
    google.protobuf.Timestamp expires_at = 4;
}

// Error details for failed operations
message AuthError {
    string code = 1;
    string message = 2;
    map<string, string> details = 3;
}